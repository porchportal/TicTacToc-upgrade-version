name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

# Set permissions for GitHub Container Registry
permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/tictactoe-app

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [16.x, 18.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: |
        # Use the npm retry script for robust dependency installation
        chmod +x scripts/npm-retry.sh
        ./scripts/npm-retry.sh install
    
    - name: Run tests
      run: npm test

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        platforms: linux/amd64
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy with Docker Compose
      run: |
        echo "Deploying with Docker Compose..."
        docker compose up -d
        
        # Wait for deployment
        sleep 30
        
        # Health check
        curl -f http://localhost:3000/health || exit 1
        
        echo "✅ Deployment successful!"
    
    - name: Run smoke tests
      run: |
        echo "Running smoke tests..."
        
        # Wait for application to be ready
        echo "Waiting for application to be ready..."
        for i in {1..30}; do
          if curl -s http://localhost:3000/health >/dev/null 2>&1; then
            echo "Application is ready!"
            break
          fi
          echo "Attempt $i/30: Application not ready yet..."
          sleep 2
        done
        
        # Test health endpoint
        echo "Testing health endpoint..."
        curl -f http://localhost:3000/health
        
        # Test main application
        echo "Testing main application..."
        curl -f http://localhost:3000/ -o /dev/null -w "HTTP Status: %{http_code}\n"
        
        echo "✅ Smoke tests passed!"
    
    - name: Run load test
      run: |
        echo "Running load test..."
        
        # Install k6
        curl -L https://github.com/grafana/k6/releases/download/v0.47.0/k6-v0.47.0-linux-amd64.tar.gz | tar xz
        sudo cp k6-v0.47.0-linux-amd64/k6 /usr/local/bin/
        
        # Run load test
        k6 run load-test.js --out json=results.json
        
        echo "✅ Load test completed!"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      with:
        name: k6-results
        path: results.json
